/*
 * This file is generated by jOOQ.
 */
package cz.cleverfarm.interview.farmassignment.generated.tables;

import com.vividsolutions.jts.geom.Geometry;
import cz.cleverfarm.interview.farmassignment.generated.Keys;
import cz.cleverfarm.interview.farmassignment.generated.Public;
import cz.cleverfarm.interview.farmassignment.generated.tables.records.FieldRecord;
import net.dmitry.jooq.postgis.spatial.binding.JTSGeometryBinding;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Field extends TableImpl<FieldRecord> {

  private static final long serialVersionUID = -1919022260;

  /** The reference instance of <code>public.field</code> */
  public static final Field FIELD = new Field();

  /** The class holding records for this type */
  @Override
  public Class<FieldRecord> getRecordType() {
    return FieldRecord.class;
  }

  /** The column <code>public.field.id</code>. */
  public final TableField<FieldRecord, UUID> ID =
      createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.field.name</code>. */
  public final TableField<FieldRecord, String> NAME =
      createField(
          DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

  /** The column <code>public.field.farm_id</code>. */
  public final TableField<FieldRecord, UUID> FARM_ID =
      createField(DSL.name("farm_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.field.created_at</code>. */
  public final TableField<FieldRecord, OffsetDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE
              .nullable(false)
              .defaultValue(
                  org.jooq.impl.DSL.field(
                      "now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)),
          this,
          "");

  /** The column <code>public.field.updated_at</code>. */
  public final TableField<FieldRecord, OffsetDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE
              .nullable(false)
              .defaultValue(
                  org.jooq.impl.DSL.field(
                      "now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)),
          this,
          "");

  /** The column <code>public.field.geom</code>. */
  public final TableField<FieldRecord, Geometry> GEOM =
      createField(
          DSL.name("geom"),
          org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\"")
              .nullable(false),
          this,
          "",
          new JTSGeometryBinding());

  /** Create a <code>public.field</code> table reference */
  public Field() {
    this(DSL.name("field"), null);
  }

  /** Create an aliased <code>public.field</code> table reference */
  public Field(String alias) {
    this(DSL.name(alias), FIELD);
  }

  /** Create an aliased <code>public.field</code> table reference */
  public Field(Name alias) {
    this(alias, FIELD);
  }

  private Field(Name alias, Table<FieldRecord> aliased) {
    this(alias, aliased, null);
  }

  private Field(Name alias, Table<FieldRecord> aliased, org.jooq.Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Field(Table<O> child, ForeignKey<O, FieldRecord> key) {
    super(child, key, FIELD);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<FieldRecord> getPrimaryKey() {
    return Keys.FIELD_PKEY;
  }

  @Override
  public List<UniqueKey<FieldRecord>> getKeys() {
    return Arrays.<UniqueKey<FieldRecord>>asList(Keys.FIELD_PKEY);
  }

  @Override
  public List<ForeignKey<FieldRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<FieldRecord, ?>>asList(Keys.FIELD__FK_FIELD_FARM);
  }

  public Farm farm() {
    return new Farm(this, Keys.FIELD__FK_FIELD_FARM);
  }

  @Override
  public Field as(String alias) {
    return new Field(DSL.name(alias), this);
  }

  @Override
  public Field as(Name alias) {
    return new Field(alias, this);
  }

  /** Rename this table */
  @Override
  public Field rename(String name) {
    return new Field(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Field rename(Name name) {
    return new Field(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<UUID, String, UUID, OffsetDateTime, OffsetDateTime, Geometry> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
