/*
 * This file is generated by jOOQ.
 */
package cz.cleverfarm.interview.farmassignment.generated.tables;


import cz.cleverfarm.interview.farmassignment.generated.Keys;
import cz.cleverfarm.interview.farmassignment.generated.Public;
import cz.cleverfarm.interview.farmassignment.generated.tables.records.FarmRecord;
import org.jooq.Field;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Farm extends TableImpl<FarmRecord> {

    private static final long serialVersionUID = 145145163;

    /**
     * The reference instance of <code>public.farm</code>
     */
    public static final Farm FARM = new Farm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmRecord> getRecordType() {
        return FarmRecord.class;
    }

    /**
     * The column <code>public.farm.id</code>.
     */
    public final TableField<FarmRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.farm.name</code>.
     */
    public final TableField<FarmRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.farm.note</code>.
     */
    public final TableField<FarmRecord, String> NOTE = createField(DSL.name("note"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.farm</code> table reference
     */
    public Farm() {
        this(DSL.name("farm"), null);
    }

    /**
     * Create an aliased <code>public.farm</code> table reference
     */
    public Farm(String alias) {
        this(DSL.name(alias), FARM);
    }

    /**
     * Create an aliased <code>public.farm</code> table reference
     */
    public Farm(Name alias) {
        this(alias, FARM);
    }

    private Farm(Name alias, Table<FarmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Farm(Name alias, Table<FarmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Farm(Table<O> child, ForeignKey<O, FarmRecord> key) {
        super(child, key, FARM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FarmRecord> getPrimaryKey() {
        return Keys.FARM_PKEY;
    }

    @Override
    public List<UniqueKey<FarmRecord>> getKeys() {
        return Arrays.<UniqueKey<FarmRecord>>asList(Keys.FARM_PKEY);
    }

    @Override
    public Farm as(String alias) {
        return new Farm(DSL.name(alias), this);
    }

    @Override
    public Farm as(Name alias) {
        return new Farm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Farm rename(String name) {
        return new Farm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Farm rename(Name name) {
        return new Farm(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
