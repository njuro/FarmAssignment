/*
 * This file is generated by jOOQ.
 */
package cz.cleverfarm.interview.farmassignment.generated.tables.records;

import com.vividsolutions.jts.geom.Geometry;
import cz.cleverfarm.interview.farmassignment.generated.tables.Country;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CountryRecord extends UpdatableRecordImpl<CountryRecord>
    implements Record3<String, Geometry, String> {

  private static final long serialVersionUID = 1705504236;

  /** Setter for <code>public.country.code</code>. */
  public void setCode(String value) {
    set(0, value);
  }

  /** Getter for <code>public.country.code</code>. */
  public String getCode() {
    return (String) get(0);
  }

  /** Setter for <code>public.country.borders</code>. */
  public void setBorders(Geometry value) {
    set(1, value);
  }

  /** Getter for <code>public.country.borders</code>. */
  public Geometry getBorders() {
    return (Geometry) get(1);
  }

  /** Setter for <code>public.country.name</code>. */
  public void setName(String value) {
    set(2, value);
  }

  /** Getter for <code>public.country.name</code>. */
  public String getName() {
    return (String) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, Geometry, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<String, Geometry, String> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Country.COUNTRY.CODE;
  }

  @Override
  public Field<Geometry> field2() {
    return Country.COUNTRY.BORDERS;
  }

  @Override
  public Field<String> field3() {
    return Country.COUNTRY.NAME;
  }

  @Override
  public String component1() {
    return getCode();
  }

  @Override
  public Geometry component2() {
    return getBorders();
  }

  @Override
  public String component3() {
    return getName();
  }

  @Override
  public String value1() {
    return getCode();
  }

  @Override
  public Geometry value2() {
    return getBorders();
  }

  @Override
  public String value3() {
    return getName();
  }

  @Override
  public CountryRecord value1(String value) {
    setCode(value);
    return this;
  }

  @Override
  public CountryRecord value2(Geometry value) {
    setBorders(value);
    return this;
  }

  @Override
  public CountryRecord value3(String value) {
    setName(value);
    return this;
  }

  @Override
  public CountryRecord values(String value1, Geometry value2, String value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached CountryRecord */
  public CountryRecord() {
    super(Country.COUNTRY);
  }

  /** Create a detached, initialised CountryRecord */
  public CountryRecord(String code, Geometry borders, String name) {
    super(Country.COUNTRY);

    set(0, code);
    set(1, borders);
    set(2, name);
  }
}
